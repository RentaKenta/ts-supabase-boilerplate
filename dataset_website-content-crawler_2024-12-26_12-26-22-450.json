[{
  "url": "https://shipfa.st/docs",
  "markdown": "# Get started | ShipFast Documentation\n\nHey maker, welcome to ShipFast üëã\n\nHere's a quick overview of the boilerplate. Follow along to get your app up and running.\n\nOnce you're done, start with\n\n[this tutorial](https://shipfa.st/docs/tutorials/ship-in-5-minutes)\n\nto launch your project in 5 minutes. Let's build that startup, FAST ‚ö°Ô∏è\n\nYou're browsing the /app router documentation. To use the /pages router,\n\n[see here](https://shipfa.st/docs-old)\n\n## Start a local server\n\n1\\. In your terminal, run the following commands\n\none-by-one:\n\n```\n1git clone https://github.com/Marc-Lou-Org/ship-fast.git [YOUR_APP_NAME]\n2cd [YOUR_APP_NAME]\n3npm install\n4git remote remove origin\n5npm run dev\n```\n\nShipFast requires Node 18.17 or greater. Type\n\n`node -v` in your terminal to check version.\n\n2\\. Rename `.env.example` to\n\n`.env.local`\n\n```\n1mv .env.example .env.local\n```\n\n3\\. Open `http://localhost:3000` to see your site. And voila!\n\nYou will see errors in the console but nothing important.\n\n## NextJS project structure\n\n*   /app ‚Üí Pages (1 folder + page.js = 1 page)\n*   /app/api ‚Üí API calls (1 file = 1 API endpoint)\n*   /components ‚Üí React components\n*   /libs ‚Üí Libraries helper functions (Stripe & Resend, auth etc.)\n*   /models ‚Üí Database models\n\n## config.js file\n\nIt is where you configure your app. Each key is documented to know how and why it's used. Have a thorough look at it: it is the backbone of the app.\n\n## .env file\n\nRename the `.env.example` file to `.env.local`. Change `NEXTAUTH_SECRET` to anything else (15 characters minimum). The file content should look like this:\n\n```\n1NEXTAUTH_URL=http://localhost:3000\n2NEXTAUTH_SECRET=\n3GOOGLE_ID=\n4GOOGLE_SECRET=\n5MONGODB_URI=\n6RESEND_API_KEY=\n7STRIPE_PUBLIC_KEY=\n8STRIPE_SECRET_KEY=\n9STRIPE_WEBHOOK_SECRET=\n```\n\nNow go ahead and follow\n\n[this tutorial](https://shipfa.st/docs/tutorials/ship-in-5-minutes)\n\nto get your startup live within 5 minutes!"
},
{
  "url": "https://shipfa.st/docs/security/rate-limiting-api-routes",
  "markdown": "# Rate Limiting (API Routes) Security\n\nIt is recommended to protect your API routes from abuse by rate limiting them. This tutorial will show you how to rate limit your API routes using Upstash.\n\nWe will be protecting API routes `/api/one` and `/api/two`. You can replace them with your own API endpoints.\n\nSetup\n\n*   Sign up on [Upstash](https://console.upstash.com/login)\n*   Create a new [Redis database](https://console.upstash.com/redis)\n*   Add the `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` to your `.env.local` file\n*   Install the packages:\n    \n    ```\n    1npm install @upstash/redis @upstash/ratelimit\n    ```\n    \n*   Create a new `middleware.js` file in the root directory (the same level as the `/app` folder) and add the following content:\n    \n    ```\n    1import { NextResponse } from \"next/server\";\n    2import { Ratelimit } from \"@upstash/ratelimit\";\n    3import { Redis } from \"@upstash/redis\";\n    4\n    5const redis = new Redis({\n    6  url: process.env.UPSTASH_REDIS_REST_URL,\n    7  token: process.env.UPSTASH_REDIS_REST_TOKEN,\n    8});\n    9\n    10const ratelimit = new Ratelimit({\n    11  redis: redis,\n    12  limiter: Ratelimit.slidingWindow(5, \"60 s\"),\n    13});\n    14\n    15export default async function middleware(request) {\n    16  const ip = request.ip ?? \"127.0.0.1\";\n    17  const { success } = await ratelimit.limit(ip);\n    18\n    19  return success\n    20    ? NextResponse.next()\n    21    : NextResponse.redirect(new URL(\"/blocked\", request.url));\n    22}\n    23\n    24export const config = {\n    25  matcher: [\"/api/one\", \"/api/two\"],\n    26};\n    27\n    ```\n    \n    We are rate limiting the user to 5 requests per minute based on their IP using the sliding window algorithm. You can refer to the\n    \n    [Upstash ratelimit SDK documentation](https://upstash.com/docs/oss/sdks/ts/ratelimit/overview)\n    \n    for more information on customizing it.\n    \n*   Create a new `/app/blocked/page.js` file. This is the page the user will be redirected to when they hit the rate limit. Add the following content:\n    \n    ```\n    1\"use client\";\n    2\n    3import config from \"@/config\";\n    4import { signIn } from \"next-auth/react\";\n    5import React from \"react\";\n    6import Link from \"next/link\";\n    7\n    8const Blocked = () => {\n    9return (\n    10  <main className=\"relative bg-neutral text-neutral-content h-screen w-full flex flex-col justify-center gap-8 items-center p-10\">\n    11    <h1 className=\"text-xl md:text-2xl font-medium\">\n    12      Hm, Access Blocked\n    13    </h1>\n    14    <p>Try again in 1 minute</p>\n    15\n    16    <div>\n    17      <button\n    18        onClick={() =>\n    19          signIn(undefined, {\n    20            callbackUrl: config.auth.callbackUrl,\n    21          })\n    22        }\n    23        className=\"link\"\n    24      >\n    25        Login\n    26      </button>{\" \"}\n    27      or{\" \"}\n    28      <Link className=\"link\" href=\"/\">\n    29        Home\n    30      </Link>\n    31    </div>\n    32  </main>\n    33);\n    34};\n    35\n    36export default Blocked;\n    ```\n    \n*   That's it! You have successfully rate limited the API routes. Now, when a user hits the rate limit, they will be redirected to the `/blocked` page."
},
{
  "url": "https://shipfa.st/docs/security/schema-validation",
  "markdown": "# Schema Validation Security | ShipFast Documentation\n\nIt is a good practice to validate the data of your API routes. You can use a schema validation library like [Zod](https://zod.dev/) to validate the data of your API routes.\n\nHere is an example of how to use Zod to validate the data of an API route:\n\n```\n1import { NextResponse } from \"next/server\";\n2import { z } from \"zod\";\n3\n4const schema = z.object({\n5  email: z.string().email(),\n6});\n7\n8export async function POST(request) {\n9  const { email } = await request.json();\n10\n11  const isValidEmail = schema.safeParse(email);\n12\n13  if (!isValidEmail.success) {\n14    return NextResponse.json({ error: \"Invalid email\" }, { status: 400 });\n15  }\n16\n17  return NextResponse.json({ email: isValidEmail.data });\n18}\n19\n```"
},
{
  "url": "https://shipfa.st/docs/security/security-headers",
  "markdown": "# Security Headers Security | ShipFast Documentation\n\nAdd the following security headers to your `next.config.js` file to improve the security of your app:\n\n```\n1const nextConfig = {\n2  reactStrictMode: true,\n3  images: {\n4    domains: [\n5      // NextJS <Image> component needs to whitelist domains for src={}\n6      \"lh3.googleusercontent.com\",\n7      \"pbs.twimg.com\",\n8      \"images.unsplash.com\",\n9      \"logos-world.net\",\n10    ],\n11  },\n12  async headers() { \n13    return {\n14      source: \"/(.*)\",\n15      headers: [\n16        {\n17          key: \"Strict-Transport-Security\",\n18          value: \"max-age=31536000; includeSubDomains; preload\",\n19        },\n20        {\n21          key: \"X-Frame-Options\",\n22          value: \"DENY\",\n23        },\n24        {\n25          key: \"X-Content-Type-Options\",\n26          value: \"nosniff\",\n27        },\n28        {\n29          key: \"Referrer-Policy\",\n30          value: \"strict-origin-when-cross-origin\",\n31        },\n32      ],\n33    };\n34  }\n35};\n36\n37module.exports = nextConfig;\n38\n```"
},
{
  "url": "https://shipfa.st/docs/deployment",
  "markdown": "# Deployment | ShipFast Documentation\n\nGrow your startup with actionable data\n\nAnalyze your traffic and find growth opportunities with DataFast. ShipFast members get 30% off all yearly plans ‚ù§Ô∏è"
},
{
  "url": "https://shipfa.st/docs/components/features-grid",
  "markdown": "# Features Grid Components | ShipFast Documentation\n\n## \n\nA component to display features with interactive demos in a responsive grids layout. Each feature has a title, a short description, and an interactive demo.\n\n![A Features Grid component for ShipFast boilerplate](https://shipfa.st/docs/components/featuresGrid.jpg)\n\n```\n1import FeaturesGrid from \"@/components/FeaturesGrid\";\n```\n\n### Tips\n\n*   Keep the title short and simple (less than 5 words).\n*   Each feature card can take upto 3 columns of width.\n*   The interactive demo should be a simple, yet powerful example of the feature.\n*   You can also display a video or an image instead of an interactive demo.\n\nUpdated on: Thursday, May 16, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/extras",
  "markdown": "# Extras | ShipFast Documentation\n\nSetup\n\n*   Add your own logo in the `/app` folder and name it `icon.png`.\n    \n    Not using .png extension?\n    \n    Update components that use icon.png like the\n    \n    `Header`\n    \n*   Create your site favicon with this free [Favicon Generator](https://realfavicongenerator.net/). Download the zip file and put this 2 files in the `/app` folder:\n    \n    *   `apple-touch-icon.png` (rename it `apple-icon.png`)\n    *   `favicon.ico`\n    \n      \n    NextJS will automatically reference them in the `<head />` of your HTML page. Read more about [metadata file convention](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons#icon).\n*   Create a rectangle logo with your name like the one below. Name it `logoAndName.png` and add it to the `/public` folder. Next-Auth will automatically add it to your login pages (see `/libs/next-auth.js` file).![logo](https://shipfa.st/logoAndName.png)\n*   Create two 1200x660 images for social media sharing. Name the first `opengraph-image.png` and the second `twitter-image.png` and add them to the `/app` folder.\n    \n    NextJS will automatically reference them in the\n    \n    `<head />` of your HTML page. Read more about [metadata file convention](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons#icon).\n\n## Useful ressources\n\n*   If you need a logo, you can use [LogoFast](https://logofa.st/)\n*   If you need analytics, you can use [DataFast](https://datafa.st/)\n*   If you need SVG illustrations, you can use [Undraw](https://undraw.co/search)\n*   If you need SVG background patterns, you can use [Hero Patterns](https://heropatterns.com/)\n*   If you need icons, you can use [Heroicons](https://heroicons.com/) & [Lucide](https://lucide.dev/icons/)\n*   If you need SVG blobs, you can use [Haikei](https://app.haikei.app/)\n*   If you need Tailwind Snippets , you can use [Snippets](https://snippets.alexandru.so/)\n*   If you need Notion-like icons, you can use [Overflow](https://www.overflow.design/ni.html?ref=producthunt)\n*   If you need cute SVG doodles, you can use [Figma Doodles](https://www.figma.com/community/file/1019353050314527791)"
},
{
  "url": "https://shipfa.st/docs/components/cta",
  "markdown": "# CTA Components | ShipFast Documentation\n\n## A screen-size CTA section with a title, a supporting headline, background image, and CTA.\n\n![A CTA component for ShipFast boilerplate](https://shipfa.st/docs/components/cta.jpg)\n\n```\n1import CTA from \"@/components/CTA\";\n```\n\n### Tips\n\n*   The headline should highlight the value your product/service provides. Why should a random user signup? What pain are you relieving?\n*   Your CTA should start with a verb (i.e. Get, Discover, Learn, etc.)\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/pricing",
  "markdown": "# Pricing Components | ShipFast Documentation\n\n## A pricing section with ability to feature a plan. Just add a plan to your `config.js` file to show more.\n\n![A Pricing component for ShipFast boilerplate](https://shipfa.st/docs/components/pricing.jpg)\n\n```\n1import Pricing from \"@/components/Pricing\";\n```\n\n### Tips\n\n*   Good, Better, Best is a good pricing strategy. Read more [here](https://hbr.org/2018/09/the-good-better-best-approach-to-pricing)\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/blog",
  "markdown": "# Blog Components | ShipFast Documentation\n\n## Create an entire blog with a few clicks ([Example](https://byedispute.com/blog))\n\n*   Pre-generated pages: The `/blog` folder contains all the pages to make a professional blog. Authors, categories, articles, etc. are all pre-generated and linkings are done automatically.\n*   Centralized content: The `/blog/_assets/content.js` file contains all the blog content (articles, authors, etc.). It's super easy to add/edit content.\n*   Beautiful components: The blog comes with 5 handy components like `<Avatar />` or `<CardArticle />` to make your life easier.\n*   SEO-optimized: The blog gets the best SEO practices out of the box. itemProp, schema markup, meta tags, etc. are all set up for you. Google Lighthouse score is close to 100/100.\n*   Custom design: The blog has pre-made classes to customize the design to your liking. It's also fully responsive and comes with 20+ themes.\n\n![A Blog component for ShipFast boilerplate](https://shipfa.st/docs/components/blog.jpg)\n\n### Tips\n\n*   Submit your new articles to [Google Search Console](https://search.google.com/search-console) to get indexed faster.\n*   Run a Google Lighthouse test on your articles to see how well they're optimized for SEO.\n*   All the blog content lies in the `/app/blog` folder to avoid cluttering your project. Remove it if you don't need it.\n\nUpdated on: Tuesday, December 5, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/faq",
  "markdown": "# FAQ Components | ShipFast Documentation\n\n## A list of questions/answers to answer the most commonly asked questions.\n\n![A FAQ component for ShipFast boilerplate](https://shipfa.st/docs/components/faq.jpg)\n\n```\n1import FAQ from \"@/components/FAQ\";\n```\n\n### Tips\n\n*   Try to cover an potential objections your visitors might have. For instance, if you're selling a course, you might want to add a question about the refund policy.\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonial1small",
  "markdown": "# Testimonial Small Components | ShipFast Documentation\n\n## A beautiful & detailed testimonial to show love from your customer.\n\n![A Testimonial Small component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonial1Small.jpg)\n\n```\n1import Testimonial1Small from \"@/components/Testimonial1Small\";\n```\n\n### Tips\n\n*   Don't ask users if they like your product. Instead ask how it changed in their lives after using it\n*   Highlight the most important part of the testimonial to avoid clutter.\n\nUpdated on: Wednesday, February 21, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonials1",
  "markdown": "# Testimonial Single Components | ShipFast Documentation\n\n## A beautiful & detailed testimonial to show love from your customer.\n\n![A Testimonial Single component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonials1.jpg)\n\n```\n1import Testimonials1 from \"@/components/Testimonials1\";\n```\n\n### Tips\n\n*   Don't ask users if they like your product. Instead ask how it changed in their lives after using it\n*   Highlight the most important part of the testimonial to avoid clutter.\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonials3",
  "markdown": "# Testimonial Triple Components | ShipFast Documentation\n\n## 3 simple testimonials to show love from your customers.\n\n![A Testimonial Triple component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonials3.jpg)\n\n```\n1import Testimonials3 from \"@/components/Testimonials3\";\n```\n\n### Tips\n\n*   Don't ask users if they like your product. Instead ask how it changed in their lives after using it\n*   Highlight the most important part of the testimonial to avoid clutter.\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonialsAvatar",
  "markdown": "# Testimonial Small Components | ShipFast Documentation\n\n## A small testimonial showcase 5 pictures of your customers and a rating.\n\n![A Testimonial Small component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonialAvatars.jpg)\n\n```\n1import TestimonialsAvatars from \"@/components/TestimonialsAvatars\";\n```\n\nUpdated on: Wednesday, February 21, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonials11",
  "markdown": "# Testimonial Grid Components | ShipFast Documentation\n\n## 11 simple testimonials to show a lot of love from your customers. It supports videos to build even more trust with your users.\n\n![A Testimonial Grid component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonials11.jpg)\n\n```\n1import Testimonials11 from \"@/components/Testimonials11\";\n```\n\n### Tips\n\n*   Don't ask users if they like your product. Instead ask how it changed in their lives after using it\n*   Highlight the most important part of the testimonial to avoid clutter.\n*   2 or 3 video testimonials work like a charm\n\nUpdated on: Saturday, January 13, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/Footer",
  "markdown": "# Footer Components | ShipFast Documentation\n\n## A simpler Footer with a logo, slogan and links.\n\n![A Footer component for ShipFast boilerplate](https://shipfa.st/docs/components/footer.jpg)\n\n```\n1import Footer from \"@/components/Footer\";\n```\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonLead",
  "markdown": "# Button Lead Components | ShipFast Documentation\n\n## \n\nCollect emails and automatically save them in the database. Perfect for a waitlist (if your product isn't ready yet) or a lead generation popup.\n\nIt call the `/api/lead/route.js` API route to store the lead in the database.\n\n![A Button Lead component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonLead.jpg)\n\n```\n1import ButtonLead from \"@/components/ButtonLead\";\n```\n\nUpdated on: Friday, September 15, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonCheckout",
  "markdown": "# Button Checkout Components | ShipFast Documentation\n\n## \n\nOpens a Stripe Checkout session. Perfect for a one-time payment or a subscription.\n\nSet `mode=\"payment\"` for one-time payments or `mode=\"subscription\"` for recurring payments like a monthly membership.\n\nBy default the user must be logged in to checkout to prevent potential disputes like a fraudulent payment with a fake email. You can change that in the `/api/stripe/create-checkout/route.js` API route\n\nThis component is used to [create Stripe subscriptions and one-time payments](https://shipfa.st/docs/tutorials/subscriptions).\n\n![A Button Checkout component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonCheckout.jpg)\n\n```\n1import ButtonCheckout from \"@/components/ButtonCheckout\";\n```\n\nUpdated on: Tuesday, September 5, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonSignin",
  "markdown": "# Button Sign-in Components | ShipFast Documentation\n\n## \n\nA simple button to sign-in/sign-up users with our providers (Google & Magic Links).\n\nIt automatically redirects user to `callbackUrl` (config.auth.callbackUrl) after login, which is normally a private page for users to manage their accounts.\n\nIf the user is already logged in, it will show their profile picture & redirect them to `callbackUrl` immediately.\n\n![A Button Sign-in component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonSignin.jpg)\n\n```\n1import ButtonSignin from \"@/components/ButtonSignin\";\n```\n\nUpdated on: Saturday, October 21, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonGradient",
  "markdown": "# Button Gradient Components | ShipFast Documentation\n\n## A beautiful button with an animated gradient background. Perfect for AI tools!\n\n![A Button Gradient component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonGradient.jpg)\n\n```\n1import ButtonGradient from \"@/components/ButtonGradient\";\n```\n\nUpdated on: Saturday, August 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonPopover",
  "markdown": "# Button Popover Components | ShipFast Documentation\n\n## An animated button that pops over a menu. Use it when the user interface is getting crowded.\n\n![A Button Popover component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonPopover.jpg)\n\n```\n1import ButtonPopover from \"@/components/ButtonPopover\";\n```\n\nUpdated on: Saturday, August 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/buttonAccount",
  "markdown": "# Button Account Components | ShipFast Documentation\n\n## \n\nA button with a dropdown menu to manage user account:\n\n*   **Billing:** Open a Stripe Customer Portal to manage their billing (cancel subscription, update payment method, etc.). You have to manually activate the Customer Portal in your [Stripe Dashboard](https://dashboard.stripe.com/test/settings/billing/portal). This is only available if the customer has a customerId (they made a purchase previously)\n*   **Logout:** sign out the user and go back to the homepage\n\nIt's automatically hidden if the user is not logged in. This component is used to [handle Stripe Subscriptions](https://shipfa.st/docs/tutorials/subscriptions).\n\n![A Button Account component for ShipFast boilerplate](https://shipfa.st/docs/components/buttonAccount.jpg)\n\n```\n1import ButtonAccount from \"@/components/ButtonAccount\";\n```\n\nUpdated on: Monday, October 30, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/betterIcon",
  "markdown": "# Better Icon Components | ShipFast Documentation\n\n## A better way to display simple SVG icons!\n\n![A Better Icon component for ShipFast boilerplate](https://shipfa.st/docs/components/betterIcon.jpg)\n\n```\n1import BetterIcon from \"@/components/BetterIcon\";\n```\n\nUpdated on: Saturday, August 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/testimonialsRating",
  "markdown": "# Rating Components | ShipFast Documentation\n\n## Showing your app rating. Looks good above a headline.\n\n![A Rating component for ShipFast boilerplate](https://shipfa.st/docs/components/testimonialRating.jpg)\n\n```\n1import TestimonialRating from \"@/components/TestimonialRating\";\n```\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/tabs",
  "markdown": "# Tabs Components | ShipFast Documentation\n\n## A simple way to organize content into separate sections.\n\n![A Tabs component for ShipFast boilerplate](https://shipfa.st/docs/components/tabs.jpg)\n\n```\n1import Tabs from \"@/components/Tabs\";\n```\n\nUpdated on: Saturday, September 14, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/modal",
  "markdown": "# Modal Components | ShipFast Documentation\n\n## An animated popup window for explainers, lead generation, forms, etc.\n\n![A Modal component for ShipFast boilerplate](https://shipfa.st/docs/components/modal.jpg)\n\n```\n1import Modal from \"@/components/Modal\";\n2\n3export default function Component() {\n4  const [isModalOpen, setIsModalOpen] = useState(false);\n5              \n6  return (\n7    <Modal isOpen={isModalOpen} setIsOpen={setIsModalOpen} />\n8  );\n9}\n```\n\nUpdated on: Saturday, August 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/security",
  "markdown": "# Security | ShipFast Documentation\n\nTutorials to protect your ShipFast app from common security threats. Shipping fast is great, shipping safe is better."
},
{
  "url": "https://shipfa.st/docs/security/rate-limiting-magic-links",
  "markdown": "# Rate Limiting (Magic Links) Security\n\n**NextAuth does not have a built-in functionality to rate limit magic link emails.**\n\nInstead, you can use a service like [Upstash](https://upstash.com/) to secure your `/api/auth/signin/email` endpoint (responsible for signing up with magic links).\n\nSetup\n\n*   Sign up on [Upstash](https://console.upstash.com/login)\n*   Create a new [Redis database](https://console.upstash.com/redis)\n*   Add the `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` to your `.env.local` file\n*   Install the packages:\n    \n    ```\n    1npm install @upstash/redis @upstash/ratelimit\n    ```\n    \n*   Create a new `middleware.js` file in the root directory (the same level as the `/app` folder) and add the following content:\n    \n    ```\n    1import { NextResponse } from \"next/server\";\n    2import { Ratelimit } from \"@upstash/ratelimit\";\n    3import { Redis } from \"@upstash/redis\";\n    4\n    5const redis = new Redis({\n    6  url: process.env.UPSTASH_REDIS_REST_URL,\n    7  token: process.env.UPSTASH_REDIS_REST_TOKEN,\n    8});\n    9\n    10const ratelimit = new Ratelimit({\n    11  redis: redis,\n    12  limiter: Ratelimit.slidingWindow(5, \"60 s\"),\n    13});\n    14\n    15export default async function middleware(request) {\n    16  const ip = request.ip ?? \"127.0.0.1\";\n    17  const { success } = await ratelimit.limit(ip);\n    18\n    19  return success\n    20    ? NextResponse.next()\n    21    : NextResponse.redirect(new URL(\"/blocked\", request.url));\n    22}\n    23\n    24export const config = {\n    25  matcher: [\"/api/auth/signin/email\"],\n    26};\n    27\n    ```\n    \n    We are rate limiting the user to 5 requests per minute based on their IP using the sliding window algorithm. You can refer to the\n    \n    [Upstash ratelimit SDK documentation](https://upstash.com/docs/oss/sdks/ts/ratelimit/overview)\n    \n    for more information on customizing it.\n    \n*   Create a new `/app/blocked/page.js` file. This is the page the user will be redirected to when they hit the rate limit. Add the following content:\n    \n    ```\n    1\"use client\";\n    2\n    3import config from \"@/config\";\n    4import { signIn } from \"next-auth/react\";\n    5import React from \"react\";\n    6import Link from \"next/link\";\n    7\n    8const Blocked = () => {\n    9\treturn (\n    10\t\t<main className=\"relative bg-neutral text-neutral-content h-screen w-full flex flex-col justify-center gap-8 items-center p-10\">\n    11\t\t\t<h1 className=\"text-xl md:text-2xl font-medium\">\n    12\t\t\t\tHm, Access Blocked\n    13\t\t\t</h1>\n    14\t\t\t<p>Try again in 1 minute</p>\n    15\n    16\t\t\t<div>\n    17\t\t\t\t<button\n    18\t\t\t\t\tonClick={() =>\n    19\t\t\t\t\t\tsignIn(undefined, {\n    20\t\t\t\t\t\t\tcallbackUrl: config.auth.callbackUrl,\n    21\t\t\t\t\t\t})\n    22\t\t\t\t\t}\n    23\t\t\t\t\tclassName=\"link\"\n    24\t\t\t\t>\n    25\t\t\t\t\tLogin\n    26\t\t\t\t</button>{\" \"}\n    27\t\t\t\tor{\" \"}\n    28\t\t\t\t<Link className=\"link\" href=\"/\">\n    29\t\t\t\t\tHome\n    30\t\t\t\t</Link>\n    31\t\t\t</div>\n    32\t\t</main>\n    33\t);\n    34};\n    35\n    36export default Blocked;\n    ```\n    \n*   That's it! You have successfully rate limited the Magic Link sign-ins. Now, when a user hits the rate limit, they will be redirected to the `/blocked` page."
},
{
  "url": "https://shipfa.st/docs/security/sending-limit-mailgun",
  "markdown": "# Sending Limit In Mailgun Security\n\n‚úã Highly Recommended\n\nSet a sending limit in your Mailgun account to prevent abuse.\n\nGo to your [Mailgun account settings](https://app.mailgun.com/app/account/settings) and edit the `Custom Message Limit`.\n\nUnless you have a lot of traffic already, set a lower threshold like 5000."
},
{
  "url": "https://shipfa.st/docs/tutorials",
  "markdown": "# Tutorials | ShipFast Documentation\n\nFollow along to get your app up and running in no time. Start with\n\n[this tutorial](https://shipfa.st/docs/tutorials/ship-in-5-minutes)\n\nto launch your project in 5 minutes."
},
{
  "url": "https://shipfa.st/docs/security/monthly-budget-openai",
  "markdown": "# Monthly Budget In OpenAI Security\n\n‚úã Highly Recommended\n\nSet a sending limit in your OpenAI account to prevent abuse.\n\nGo to your [OpenAI Settings](https://platform.openai.com/settings), then `Projects Limits` and set `Monthly Budget` to a reasonable amount."
},
{
  "url": "https://shipfa.st/docs/tutorials/ship-in-5-minutes",
  "markdown": "# Ship In 5 Minutes Tutorials\n\nLet's get your startup in front of your customers in 5 minutes ‚ö°Ô∏è\n\nWe're building a beautiful landing page and adding forms to collect emails for a waitlist (optional)\n\nFinish this tutorial to be featured on our homepage ‚≠êÔ∏è\n\n*   If you havent't already, clone the repo and run the server locally. See the [Get Started](https://shipfa.st/docs) tutorial.\n*   Delete everything in `/app/page.js`, and paste this:\n    \n    ```\n    1import { Suspense } from 'react'\n    2import Header from \"@/components/Header\";\n    3import Hero from \"@/components/Hero\";\n    4import Problem from \"@/components/Problem\";\n    5import FeaturesAccordion from \"@/components/FeaturesAccordion\";\n    6import Pricing from \"@/components/Pricing\";\n    7import FAQ from \"@/components/FAQ\";\n    8import CTA from \"@/components/CTA\";\n    9import Footer from \"@/components/Footer\";\n    10\n    11export default function Home() {\n    12  return (\n    13    <>\n    14      <Suspense>\n    15        <Header />\n    16      </Suspense>\n    17      <main>\n    18        <Hero />\n    19        <Problem />\n    20        <FeaturesAccordion />\n    21        <Pricing />\n    22        <FAQ />\n    23        <CTA />\n    24      </main>\n    25      <Footer />\n    26    </>\n    27  );\n    28}\n    ```\n    \n*   Edit the copy to fit your business logic. Each component has tips to help you write copy that sells‚Äîsee [components section](https://shipfa.st/docs/components/hero). Congrats you have a beautiful landing page to show!\n*   (Optional) To collect emails for a waitlist, [set up a database](https://shipfa.st/docs/features/database) and uncomment the code in `/api/lead/route.js` to save emails in your database.\n*   (Optional) Replace the main call-to-action button in `Hero`, `Pricing`, and `CTA` with this:\n    \n    ```\n    1import ButtonLead from \"@/components/ButtonLead\";\n    2\n    3  ...\n    4  </div>\n    5\n    6  {/* For the Hero & CTA use this üëá */}\n    7  <ButtonLead />\n    8\n    9  {/* For the Pricing use this instead üëá */}\n    10  <ButtonLead extraStyle=\"!max-w-none !w-full\" />\n    11  \n    12  <div>\n    13  ...\n    ```\n    \n*   It's time to deploy! If you need help, here's a [simple tutorial](https://shipfa.st/docs/deployment)\n\nCongrats on crushing the first steps, legend!\n\n‚Äî Marc"
},
{
  "url": "https://shipfa.st/docs/tutorials/user-auth",
  "markdown": "# User Authentication Tutorials | ShipFast Documentation\n\nShipFast uses [NextAuth](https://next-auth.js.org/) to authenticate users. You can configure it in the `/app/api/auth/[...nextauth]/route.js` file.\n\nThere are 2 built-in ways to authenticate users with ShipFast: [Magic Links](https://shipfa.st/docs/features/magic-links) & [Google Oauth](https://shipfa.st/docs/features/google-oauth).\n\nOnce you've completed at least one of the tutorials above, you can login users like this:\n\n```\n1\"use client\"\n2\n3import { signIn } from \"next-auth/react\";\n4import config from \"@/config\";\n5                \n6const SigninButton = () => {\n7  return (\n8    <button\n9      className=\"btn btn-primary\"\n10      onClick={() => signIn(undefined, { callbackUrl: config.auth.callbackUrl })}\n11    >\n12      Login\n13    </button>\n14  );\n15};\n16                \n17export default SigninButton;\n```\n\nThe\n\n`callbackUrl`\n\nvariable in the\n\n`config.js` file is used accross the app to redirect the user at the right place after a successfull sign-up/login. It's usually a private page like\n\n`/dashboard`"
},
{
  "url": "https://shipfa.st/docs/tutorials/static-page",
  "markdown": "# Static Page Tutorials | ShipFast Documentation\n\nShipFast comes with many components to help you build SEO-optimized pages (like a landing page) in no time.\n\nThe `/components` folder contains all you need (hero, pricing, FAQ sections). Here's the list of [all the components](https://shipfa.st/docs/components) & themes.\n\nThe `/libs/seo.js` file helps you set SEO tags to better rank on Google. Make sure to [customize SEO tags.](https://shipfa.st/docs/features/seo)\n\nA simple landing page can done like this:\n\n```\n1import { getSEOTags } from \"@/libs/seo\";\n2\n3export const metadata = getSEOTags({ canonicalUrlRelative: \"/\" });\n4\n5export default function Landing() {\n6  return (\n7    <>\n8      <main\n9        className=\"min-h-screen p-12 pb-24 text-center\"\n10        data-theme=\"dark\"\n11      >\n12        <section className=\"max-w-xl mx-auto space-y-8\">\n13          <h1 className=\"text-3xl md:text-4xl font-extrabold\">\n14            Food recipes you&apos;ll love ü•¶\n15          </h1>\n16\n17          <p className=\"text-lg leading-relaxed text-base-content/80\">\n18            Our AI will generate recipes based on your preferences. New recipes\n19            will be added every week!\n20          </p>\n21\n22          <img\n23            src=\"https://images.unsplash.com/photo-1518843875459-f738682238a6?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3484&q=80\"\n24            alt=\"Vegetables\"\n25            width={500}\n26            height={250}\n27            className=\"rounded-lg mx-auto\"\n28          />\n29\n30          <button className=\"btn btn-primary btn-wide\">Get started</button>\n31        </section>\n32      </main>\n33    </>\n34  );\n35}\n```"
},
{
  "url": "https://shipfa.st/docs/tutorials/api-call",
  "markdown": "# API Call Tutorials | ShipFast Documentation\n\nAny file named `route.js` in the `/app/api` folder is an API endpoint. Use the helper `/libs/api.js` (axios instance with interceptors) to simplify API calls:\n\n*   Automatically display error messages\n*   Redirect to login page upon error 401\n*   Add `/api` as a base URL: /api/user/posts ‚Üí /user/posts\n\n## Protected API calls\n\nNextAuth automatically handles the authentication with cookies. Just make a normal API call on the front-end like this:\n\n/app/user-profile/page.js\n\n```\n1\"use client\"\n2\n3import { useState } from \"react\";\n4import apiClient from \"@/libs/api\";\n5\n6const UserProfile = () => {\n7  const [isLoading, setIsLoading] = useState(false);\n8\n9  const saveUser = async () => {\n10    setIsLoading(true);\n11\n12    try {\n13      const { data } = await apiClient.post(\"/user\", {\n14        email: \"new@gmail.com\",\n15      });\n16\n17      console.log(data);\n18    } catch (e) {\n19      console.error(e?.message);\n20    } finally {\n21      setIsLoading(false);\n22    }\n23  };\n24\n25  return (\n26    <button className=\"btn btn-primary\" onClick={() => saveUser()}>\n27      {isLoading && (\n28        <span className=\"loading loading-spinner loading-sm\"></span>\n29      )}\n30      Save\n31    </button>\n32  );\n33};\n34\n35export default UserProfile;\n36\n```\n\nIn the backend, we get the session and we can use it to retrieve the user from the database. You have to [configure the database](https://shipfa.st/docs/features/database) first. The API file should look like this:\n\n```\n1import { NextResponse } from \"next/server\";\n2import { getServerSession } from \"next-auth/next\";\n3import { authOptions } from \"@/libs/next-auth\";\n4import connectMongo from \"@/libs/mongoose\";\n5import User from \"@/models/User\";\n6\n7export async function POST(req) {\n8  const session = await getServerSession(authOptions);\n9\n10  if (session) {\n11    const { id } = session.user;\n12\n13    const body = await req.json();\n14\n15    if (!body.email) {\n16      return NextResponse.json({ error: \"Email is required\" }, { status: 400 });\n17    }\n18\n19    try {\n20      await connectMongo();\n21\n22      const user = await User.findById(id);\n23\n24      if (!user) {\n25        return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n26      }\n27\n28      user.email = body.email;\n29      await user.save();\n30\n31      return NextResponse.json({ data: user }, { status: 200 });\n32    } catch (e) {\n33      console.error(e);\n34      return NextResponse.json(\n35        { error: \"Something went wrong\" },\n36        { status: 500 }\n37      );\n38    }\n39  } else {\n40    // Not Signed in\n41    return NextResponse.json({ error: \"Not signed in\" }, { status: 401 });\n42  }\n43}\n44\n```"
},
{
  "url": "https://shipfa.st/docs/tutorials/subscriptions",
  "markdown": "# Stripe Subscriptions Tutorials | ShipFast Documentation\n\nTired of managing Stripe invoices?\n\nLet your customers generate, edit, and download Stripe invoices, so you don‚Äôt have to."
},
{
  "url": "https://shipfa.st/docs/tutorials/private-page",
  "markdown": "# Private Page Tutorials | ShipFast Documentation\n\nOnce [user is authentified](https://shipfa.st/docs/tutorials/user-auth), you can build private routes like a user dashboard, account, etc.\n\nIf you want to make protected API calls, follow\n\n[this tutorial](https://shipfa.st/docs/tutorials/api-call).\n\nThe `layout.js` in `/dashboard` ensures any pages & subpages are private. If the user is not authenticated, he'll be redirected to the login page (see `auth` in `config.js`)\n\nHere's an example of a simple user dashboard showing private user data in a server component:\n\n```\n1import { getServerSession } from \"next-auth\";\n2import { authOptions } from \"@/libs/next-auth\";\n3import connectMongo from \"@/libs/mongoose\";\n4import User from \"@/models/User\";\n5\n6export default async function Dashboard() {\n7  await connectMongo();\n8  const session = await getServerSession(authOptions);\n9  const user = await User.findById(session.user.id);\n10\n11  return (\n12    <>\n13      <main className=\"min-h-screen p-8 pb-24\">\n14        <section className=\"max-w-xl mx-auto space-y-8\">\n15          <h1 className=\"text-3xl md:text-4xl font-extrabold\">\n16            User Dashboard\n17          </h1>\n18          <p>Welcome {user.name} üëã</p>\n19          <p>Your email is {user.email}</p>\n20        </section>\n21      </main>\n22    </>\n23  );\n24}\n```"
},
{
  "url": "https://shipfa.st/docs/features",
  "markdown": "# Features | ShipFast Documentation\n\nNone of the librairies are mandatory. You can set them all or only a few."
},
{
  "url": "https://shipfa.st/docs/tutorials/privacy-policy-gpt",
  "markdown": "# Privacy Policy With GPT Tutorials\n\nPrivacy policy & terms of service are mandatory when you set a Stripe account or apply for Google Oauth constent screen.\n\nShipFast boilerplate includes ChatGPT prompts to help you generate these boring documents in minutes\n\nGo the the `/app/tos/page.js` & `/app/privacy-policy/page.js` files in the repo to get the prompts. Add your business details, prompt ChatGPT, and you're up & running!"
},
{
  "url": "https://shipfa.st/docs/features/seo",
  "markdown": "# SEO Features | ShipFast Documentation\n\nSetup\n\n*   Open `config.js` file and add values for `appName`, `appDescription`, and `domainName`. These values will be used as default SEO tags.  \n    The helper `/libs/seo.js` adds all the important SEO tags (with your default values) to all pages thanks to the main `/app/layout.js` file.\n*   To add custom SEO tags to a page without rewritting all the tags, do this:\n    \n    ```\n    1\n    2import { getSEOTags } from \"@/libs/seo\";\n    3...\n    4\n    5export const metadata = getSEOTags({\n    6  title: \"Terms and Conditions | ShipFast\",\n    7  canonicalUrlRelative: \"/tos\",\n    8});\n    9\n    10export default async function TermsAndConditions() {\n    11...\n    12\n    ```\n    \n    I recommend setting\n    \n    `title` and`canonicalUrlRelative`\n    \n    for each pages.\n    \n*   When relevant, add Structured Data to a page using the `renderSchemaTags()` function in `/libs/seo.js`. It helps Google understand better your website and can get you a rich snippet. Open the component for more documentation. Here's an example:\n    \n    ```\n    1import { renderSchemaTags } from \"@/libs/seo\";\n    2\n    3export default function Page() {\n    4  return (\n    5    <>\n    6      {renderSchemaTags()}\n    7\n    8      <main className=\"flex min-h-screen flex-col items-center justify-center text-center gap-12 p-8\">\n    9        <h1 className=\"text-3xl font-extrabold\">Ship Fast</h1>\n    10\n    11...\n    12\n    13      </main>\n    14    </>\n    15  );\n    16}\n    ```\n    \n*   Add your root URL to siteUrl (i.e. https://yourdomain.com) in the `next-sitemap.config.js` file, in the root folder. It will generate a sitemap.xml & robots.txt file for all your pages (at build time).\n\n## Make a Blog in minutes\n\nIn the `/app/blog/_assets` folder, you have a `content.js` file that contains all your blog posts, authors, categories and style. Simply add your content there and ShipFast will generate a blog for you. See the\n\n[blog section](https://shipfa.st/docs/components/blog)\n\nfor more details.\n\n![SEO Helper](https://shipfa.st/_next/static/media/seo_helper.78be6925.png)\n\nA list of important SEO tags"
},
{
  "url": "https://shipfa.st/docs/features/emails",
  "markdown": "# Emails Features | ShipFast Documentation\n\nYou don't have to use Resend, but you'll need an email tool to to setup magic login links, abandoned carts emails, etc...\n\nSetup\n\n*   Create a new account on [Resend](https://resend.com/)\n*   Go to \\[Domains\\], click \\[+ Add Domain\\]. It's recommended to add a subdomain like `resend.yourdomain.com`.\n*   Do all the DNS verification steps. Once done, click \\[Verify DNS Records\\] on the top right to verify your domain. It might take a few minutes.\n*   Go to \\[API Keys\\], click \\[+ Create API Key\\]. Add a name (you can name it whatever you want), and keep the other options as default. Then click \\[Add\\].\n*   Copy the API key and add it to `.env.local` as `RESEND_API_KEY`.\n    \n    You can only see the API key once, so make sure to save it.\n    \n\n## Sending emails\n\nThere are 2 ways to send emails:\n\n1/ SMTP: Emails sent for magic login links will be sent using SMTP, for instance.\n\n2/ Resend API: To send any other emails, use the\n\n`sendEmail()` function in\n\n`libs/resend.js`.\n\n## Receiving emails\n\nResend doesn't support receiving emails, yet.\n\nYou can add your support email to\n\n`resend.supportEmail` in\n\n`config.js` and pass it to the`replyTo` option in the`sendEmail()` function in\n\n`libs/resend.js` to receive replies on it.\n\n## Checklist to avoid the spam folder\n\n![Emails Helper](https://shipfa.st/_next/static/media/email_helper.c4a7f868.png)"
},
{
  "url": "https://shipfa.st/docs/features/database",
  "markdown": "# Database Features | ShipFast Documentation\n\nSetup\n\n*   Create a new project and deploy a cluster on [MongoDB Atlas](https://cloud.mongodb.com/)\n    \n    Run a local database for your dev setup so you can work offline and it's faster\n    \n*   In your project on MongoDB Altas, click \\[Network Access\\] then \\[+ Add IP Address\\]. Enter `0.0.0.0/0` in \\[Access List Entry\\]. This allows connections from your computer and your production deployment(s) (Vercel for instance).\n*   If you haven't done it yet, rename `.env.example` to `.env.local`. Then add your connection string to `MONGODB_URI` in `.env.local`.\n\n## Mongoose (optional)\n\nMongoose makes it easier to deal with MongoDB and has some cool features.  \nModels are defined in the folder /models. Add any new models there.  \nThe plugin toJSON is added to all models to remove the\n\n`_id` and\n\n`__v` (easier on front-end).  \nAlso if you add `private: true`to any field it will be removed from the response. I.e. make email private so it's not sent to the front-end."
},
{
  "url": "https://shipfa.st/docs/features/google-oauth",
  "markdown": "# Google Oauth Features | ShipFast Documentation\n\nShipFast uses [NextAuth](https://next-auth.js.org/) to authenticate users. You can configure it in the `/app/api/auth/[...nextauth]/route.js` file.\n\nSetup\n\n*   If you haven't done it yet, add this to your `.env.local`:\n    \n    ```\n    1NEXTAUTH_URL=http://localhost:3000\n    2NEXTAUTH_SECRET=\n    ```\n    \n    `NEXTAUTH_SECRET`\n    \n    is a random chain of characters for JWT encryption. Put anything in there with a least 15 characters.\n    \n*   Create a new project on [Google Cloud](https://console.cloud.google.com/)\n*   Go to APIs & Services then Credentials\n*   Click \\[Configure Consent Screen\\]\n*   Fill info. Use the ChatGPT prompts in pages /tos & /privacy-policy to generate yours automatically.  \n    Add userinfo.email & userinfo.profile to scope.  \n    Add yourself as a test user.  \n    Submit.\n*   Go to Credentials and click \\[+ Create Credentials\\] then \\[Oauth Client ID\\]\n*   Choose \\[Web Application\\].  \n    Add `http://localhost:3000` and `https://your-site.com` to Authorized JavaScript origins.  \n    Add `http://localhost:3000/api/auth/callback/google` and `https://your-site.com/api/auth/callback/google` to Authorized redirect URIs (if you're using a subdomain like www, make sure to add it too).  \n    Click \\[Create\\]\n*   Copy paste the Client ID in `GOOGLE_ID` and Client Secret in `GOOGLE_SECRET` to `.env.local.`\n*   Go to \\[Oauth Consent Screen\\] and click \\[Publish App\\] then submit for verification.  \n    Click \\[Prepare for verification\\] and fill the missing information.  \n    Google will email you and you will **have to reply to start the process**. You'll need to have your domain verified with [Google Search Console](https://search.google.com/search-console). You can go ahead and do that now.  \n    You can already login with Google on localhost. On production, it will work too but show a warning until you're verified (takes a few days).\n\nThe mongoDB adapter saves new users in the database when they successfully log in with Google. You have to\n\n[configure the database](https://shipfa.st/docs/features/database)\n\nfirst."
},
{
  "url": "https://shipfa.st/docs/features/payments",
  "markdown": "# Payments Features | ShipFast Documentation\n\n![Stripe Helper](https://shipfa.st/_next/static/media/stripe_helper.3c27ba9d.png)\n\nHow ShipFast handles Stripe subscription lifecycle\n\nSetup\n\n*   Create a new account on [Stripe](https://stripe.com/) and activate payments (boring, I know.. see you in a bit!)\n*   In your \\[Settings\\], \\[Public Details\\], add your website URL\n*   In your \\[Settings\\], \\[Branding\\], add your logo & colors\n*   In your \\[Settings\\], \\[Customer Emails\\], turn on emails for successful payments & refunds\n*   In your \\[Settings\\], \\[Customer Portal\\], activate link to customer portal (in case you need later)\n*   In the search box, type 'rules' and click \\[Fraud Prevention > Rules\\] , make sure the first 3DS rule is enabled. I also turn on the second one (recommended). Make sure to block payments if CVC fails (check below)\n*   Turn ON Test Mode\n*   Create a new product and copy the price ID (price\\_1ju5GD464564) in `config.stripe.plans[0].priceId` in the `config.js` file.\n*   In your \\[Developers\\], copy your public & private keys and add them to `STRIPE_SECRET_KEY` & `STRIPE_PUBLIC_KEY` in `.env.local`\n*   To set up the webhook locally, follow the steps in \\[Developers\\], \\[Webhook\\], \\[Test in local environment\\]. After login to Stripe CLI, use this command to forward webhook events to our API:\n    \n    ```\n    1stripe listen --forward-to localhost:3000/api/webhook/stripe\n    ```\n    \n    Copy the signing secret and add it to `STRIPE_WEBHOOK_SECRET` in `.env.local`\n\nGoing to production?\n\n*   Turn OFF Test Mode in your Stripe Dashboard\n*   In your \\[Developers\\], copy your public & private keys and add them to `STRIPE_SECRET_KEY` & `STRIPE_PUBLIC_KEY` in your production environment variables.\n*   In your \\[Developers\\], \\[Webhook\\], \\[Add Enpoint\\]. Set your domain + /api/webhook/stripe. Select \\[checkout.session.completed\\] event (or more if needed). Copy the signing secret and add it to `STRIPE_WEBHOOK_SECRET` in your production environment variables.\n*   Optional: In \\[Balance\\], \\[Manage Payouts\\], set a specific date of the month to receive your payouts (I use the 10th of each month)\n*   Optional: In \\[Settings\\], \\[Customers Emails\\], activate emails for successful payments & refunds\n\n## Create a checkout\n\nFrom the front-end, use the `ButtonCheckout` to automatically create a checkout session (one-time payment or subscription)\n\n## Stripe webhooks & subscription handling\n\nOur API listens to Stripe selected webhooks events & update the user accordingly. It turns boolean `hasAccess` (or `has_access` in Supabase) to true/false based on whether the user should have access to a paid resource or not.  \nYou can add your own business logic to the `/api/webhook/stripe` API endpoint (add credits to a user, send email with a paid e-book etc.)\n\n[\n\nDon't get banned from Stripe before getting your first customer\n\nPrevent disputes before they happen with ByeDispute\n\n![Stripe Chart](https://shipfa.st/_next/static/media/byedispute.acbdb5af.jpg)](https://byedispute.com/?ref=shipfast_docs)[\n\nTired of managing Stripe invoices?\n\nLet your customers generate, edit, and download Stripe invoices, so you don‚Äôt have to.\n\n![ZenVoice](https://shipfa.st/_next/static/media/zenvoice.2d9f9d95.jpg)](https://zenvoice.io/?ref=shipfast_docs)"
},
{
  "url": "https://shipfa.st/docs/features/customer-support",
  "markdown": "Customer Support Features | ShipFast Documentation\n\n[![ShipFast Logo](/logo_transparent.png)](/)\n\nApp Router\n\nFeatures in /app\n\n[Get started](/docs)\n\n[Tutorials](/docs/tutorials)\n\n[Ship in 5 minutes](/docs/tutorials/ship-in-5-minutes)[Static page](/docs/tutorials/static-page)[User authentication](/docs/tutorials/user-auth)[API call](/docs/tutorials/api-call)[Private page](/docs/tutorials/private-page)[Stripe Subscriptions](/docs/tutorials/subscriptions)[Privacy policy with GPT](/docs/tutorials/privacy-policy-gpt)\n\n[Features](/docs/features)\n\n[SEO](/docs/features/seo)[Database](/docs/features/database)[Emails](/docs/features/emails)[Payments](/docs/features/payments)[Google Oauth](/docs/features/google-oauth)[Magic Links](/docs/features/magic-links)[Customer support](/docs/features/customer-support)[Error handling](/docs/features/error-handling)[Analytics](/docs/features/analytics)\n\n[Components](/docs/components)\n\n[Header](/docs/components/header)[Hero](/docs/components/hero)[Problem](/docs/components/problem)[WithWithout](/docs/components/withwithout)[Features Listicle](/docs/components/features-listicle)[Features Accordion](/docs/components/features-accordion)[Features Grid](/docs/components/features-grid)[CTA](/docs/components/cta)[Pricing](/docs/components/pricing)[Blog](/docs/components/blog)[FAQ](/docs/components/faq)[Testimonial Small](/docs/components/testimonial1small)[Testimonial Single](/docs/components/testimonials1)[Testimonial Triple](/docs/components/testimonials3)[Testimonial Grid](/docs/components/testimonials11)[Testimonial Small](/docs/components/testimonialsAvatar)[Footer](/docs/components/Footer)[Button Lead](/docs/components/buttonLead)[Button Checkout](/docs/components/buttonCheckout)[Button Sign-in](/docs/components/buttonSignin)[Button Account](/docs/components/buttonAccount)[Button Gradient](/docs/components/buttonGradient)[Button Popover](/docs/components/buttonPopover)[Better Icon](/docs/components/betterIcon)[Tabs](/docs/components/tabs)[Rating](/docs/components/testimonialsRating)[Modal](/docs/components/modal)\n\n[Security](/docs/security)\n\n[Sending limit in Mailgun](/docs/security/sending-limit-mailgun)[Monthly budget in OpenAI](/docs/security/monthly-budget-openai)[Rate limiting (Magic Links)](/docs/security/rate-limiting-magic-links)[Rate limiting (API Routes)](/docs/security/rate-limiting-api-routes)[Security Headers](/docs/security/security-headers)[Schema Validation](/docs/security/schema-validation)\n\n[Deployment](/docs/deployment)\n\n[Extras](/docs/extras)\n\n[\n\nFollow updates\n\n‚Üó\n\n](https://shipfast.beehiiv.com/)[\n\nJavascript repo\n\n‚Üó\n\n](https://github.com/Marc-Lou-Org/ship-fast)[\n\nTypescript repo\n\n‚Üó\n\n](https://github.com/Marc-Lou-Org/ship-fast-ts)[\n\nSupport\n\n‚Üó\n\n](mailto:hello@shipfa.st)\n\n# FeaturesCustomer support\n\nSetup\n\n*   Create a [Crisp Account](https://crisp.chat/en/)\n*   Create a new website and copy the website ID. You can find it in the Integrations menu, in the HTML option. It' called CRISP\\_WEBSITE\\_ID.\n*   Paste your Crisp website ID in `crisp.id` in config.js.\n\n[\n\nGet ShipFast\n\n](/)"
},
{
  "url": "https://shipfa.st/docs/features/magic-links",
  "markdown": "# Magic Links Features | ShipFast Documentation\n\nShipFast uses [NextAuth](https://next-auth.js.org/) to authenticate users. You can configure it in the `/app/api/auth/[...nextauth]/route.js` file.\n\nSetup\n\n*   If you haven't done it yet, add this to your `.env.local`:\n    \n    ```\n    1NEXTAUTH_URL=http://localhost:3000\n    2NEXTAUTH_SECRET=\n    ```\n    \n    `NEXTAUTH_SECRET`\n    \n    is a random chain of characters for JWT encryption. Put anything in there with a least 15 characters.\n    \n*   If you haven't set up sending/receiving emails, [do it first](https://shipfa.st/docs/features/emails)\n*   In config.js file, add an _from_ field to `resend.fromNoReply` (usually noreply@mail.yourdomain.com)\n*   \\[Skip if using Resend\\] Add a [sending limit in Mailgun](https://shipfa.st/docs/security/sending-limit-mailgun) to prevent abuse\n\nThe mongoDB adapter saves new users in the database when they click the login link they receive by email. You have to\n\n[configure the database](https://shipfa.st/docs/features/database)\n\nfirst."
},
{
  "url": "https://shipfa.st/docs/features/error-handling",
  "markdown": "# Error Handling Features | ShipFast Documentation\n\nJavascript errors are handled gracefully in the `/app/error.js` high-level component. Error 404 (not found) is handled gracefully in the `/app/not-found.js` high-level component.\n\nWhen an error occurs, a beautiful page is shown and users can reach out support through the `<ButtonSupport />` component.\n\nBy default, it will open the Crisp customer chat (if crisp.id is present in config.js). Here's the [tutorial to set up Crisp](https://shipfa.st/docs/features/customer-support).\n\nIf crisp.id is not set up in the config.js file, it will open the user mail client (mailto:) and let them them an email to your email support (resend.supportEmail in config.js)"
},
{
  "url": "https://shipfa.st/docs/components",
  "markdown": "# Components | ShipFast Documentation\n\nAll the React components are made with TailwindCSS.\n\n## Themes\n\nBy default, 2 themes are enabled: light & dark. It will automatically switch based on the user's preferences.\n\nTo change or add themes:\n\n*   Add/remove themes in `tailwind.config.js` \\> `daisyui.themes` (keep at least one)\n*   Add the theme name to the `config.js` file in `theme` & `main`\n    \n    ```\n    1colors: {\n    2  theme: \"YOUR_THEME\",\n    3  main: themes[`[data-theme=YOUR_THEME]`][\"primary\"],\n    4}\n    ```\n    \n\nHere is a list of the [20+ available themes](https://daisyui.com/docs/themes/)\n\n## Custom components\n\nAll custom-made components are inside the `/components` folder of your ShipFast repo. Each component is documented in details in the code and in this documentation.\n\nExample: This is a [Hero component](https://shipfa.st/docs/components/hero).\n\n![A Hero component for ShipFast boilerplate](https://shipfa.st/docs/components/hero.jpg)\n\n## daisyUI components\n\nShipFast uses daisyUI as a UI kit for simple components like buttons, inputs, tabs, etc. Here are all the [daisyUI components](https://daisyui.com/components).\n\nExample: Add `className: \"btn btn-primary\"` to display this button:\n\n## Animations\n\nDiscover some cool animations in the `config.tailwind.css` file:\n\n*   `className: \"animate-opacity\"`\n*   `className: \"animate-wiggle\"`\n*   `className: \"animate-appearFromRight\"`\n*   `className: \"animate-popup\"`\n\n## Custom font\n\n1\\. Head over the the `layout.js` file in `/app`\n\n2\\. Import your favorite font from next/font/google `import { Bricolage_Grotesque } from \"next/font/google\";`\n\n3\\. Swap the current font in use `const font = Bricolage_Grotesque({ subsets: [\"latin\"] });`"
},
{
  "url": "https://shipfa.st/docs/components/header",
  "markdown": "# Header Components | ShipFast Documentation\n\n## A responsive header with your logo (left), links (center) and a CTA (right). Links and CTA are hidden on mobile and accessible with a burger menu. Add your own logo in the `/app` folder. Make sure to match the file name in `<Header />` component (currently `icon.png`)\n\n![A Header component for ShipFast boilerplate](https://shipfa.st/docs/components/header.jpg)\n\n```\n1import Header from \"@/components/Header\";\n```\n\n### Tips\n\n*   Unless you're Nike or Apple, visitors have no idea who you are. Keep your brand name small.\n*   Try to always have a Prcing link in your header. No matter what you sell, people will look for it.\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/hero",
  "markdown": "# Hero Components | ShipFast Documentation\n\n## A beautiful hero section with a title, a supporting headline, image, social proof and CTA.\n\n![A Hero component for ShipFast boilerplate](https://shipfa.st/docs/components/hero.jpg)\n\n```\n1import Hero from \"@/components/Hero\";\n```\n\n### Tips\n\n*   Your <h1> should answer this question in less than 10 words: \"Why should a random visitor stay on your site for more than 10 seconds?\".  \n    Write about the pain it's relieving, the problem it's solving, or the pleasure it's giving.\n*   The supporting headline explain how you deliver what your promise in the title.\n*   Your CTA should start with a verb (i.e. Get, Discover, Learn, etc.)\n*   Social proof = trust = more conversions. Offer the product to a few people for free in exchange for a genuine testimonial.\n*   The image is a like YouTube thumbnail. It should be super easy to understand what your product does just by looking at it.\n*   The [`<Problem />`](https://shipfa.st/docs/components/problem) section should follow this Hero section\n\nUpdated on: Tuesday, September 12, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/features/analytics",
  "markdown": "# Analytics Features | ShipFast Documentation\n\nSetup\n\n*   Add a new website on [DataFast](https://datafa.st/?ref=shipfast_analytics_setup)\n    \n    ShipFast members get 30% off all yearly plans ‚ù§Ô∏è\n    \n*   Paste the tracking script from DataFast in the main `layout.js` file.\n*   (optional) Some adblockers block DataFast. To fix this, proxy the script through the nextjs /api.  \n    First add this to next.config.js:\n    \n    ```\n    1async rewrites() {\n    2    return [\n    3      {\n    4        source: \"/js/script.js\",\n    5        destination: \"https://datafa.st/js/script.js\",\n    6      },\n    7      {\n    8        source: \"/api/events\",\n    9        destination: \"https://datafa.st/api/events\",\n    10      },\n    11    ];\n    12}\n    ```\n    \n    Then update the DataFast tracking script in the the main `layout.js` file:\n    \n    ```\n    1<script\n    2    defer\n    3    data-website-id=\"YOUR_WEBSITE_ID\"\n    4    data-domain=\"YOUR_DOMAIN\"\n    5    src=\"/js/script.js\"\n    6  ></script>\n    ```\n    \n\nI use DataFast for traffic analytics & custom events. If you want to use another tool, remove the DataFast script in the `layout.js` file."
},
{
  "url": "https://shipfa.st/docs/components/withwithout",
  "markdown": "# WithWithout Components | ShipFast Documentation\n\n## \n\nThis section explains how your product is better than competitors\n\nIt is useful if you are in a competitive market and challenge the status quo. Make sure to mention the name of your competitors for customers to understand the context.\n\n![A WithWithout component for ShipFast boilerplate](https://shipfa.st/docs/components/withWithout.jpg)\n\n```\n1import WithWithout from \"@/components/WithWithout\";\n```\n\n### Tips\n\n*   Match each line of the 'With' column with the 'Without' column\n\nUpdated on: Friday, March 1, 2024\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/problem",
  "markdown": "# Problem Components | ShipFast Documentation\n\n## \n\nYour startup fixes a problem for customers. But what happens if they don't buy your product?\n\nThis section explains the consequences of not taking care of the problem your startup promises to fix.\n\nIt goes under your Hero section, and above your Features section. A crucial, yet overlooked, component for a landing page that sells.\n\n![A Problem component for ShipFast boilerplate](https://shipfa.st/docs/components/problem.jpg)\n\n```\n1import Problem from \"@/components/Problem\";\n```\n\n### Tips\n\n*   Your [`<Hero />`](https://shipfa.st/docs/components/hero) section should make a promise to the customer: \"Our product helps you solve problem XYZ\".\n*   This Problem Agitation section section explains what happens to the customer if its problem isn't solved.\n*   The copy should NEVER mention your product. Instead, it should dig the emotional outcome of not fixing a problem.\n\nUpdated on: Thursday, December 21, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/features-accordion",
  "markdown": "# Features Accordion Components | ShipFast Documentation\n\n## \n\nA component to display 2 to 5 features in an accordion. By default, the first feature is selected. When a feature is clicked, the others are closed.\n\n*   The text is clickable and displays the feature description when clicked.\n*   The media could be a video or an image (or nothing). Videos are set to autoplay for the best UX.\n\n![A Features Accordion component for ShipFast boilerplate](https://shipfa.st/docs/components/featuresAccordion.jpg)\n\n```\n1import FeaturesAccordion from \"@/components/FeaturesAccordion\";\n```\n\n### Tips\n\n*   Keep the title short and simple (less than 5 words).\n\nUpdated on: Tuesday, November 28, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
},
{
  "url": "https://shipfa.st/docs/components/features-listicle",
  "markdown": "# Features Listicle Components | ShipFast Documentation\n\n## A list of features with icon, title, description. Click on a feature to display its description. Features are automatically being swapped every 5 seconds (optional). Good to use when multiples features are available in your app.\n\n![A Features Listicle component for ShipFast boilerplate](https://shipfa.st/docs/components/featuresListicle.jpg)\n\n```\n1import FeaturesListicle from \"@/components/FeaturesListicle\";\n```\n\n### Tips\n\n*   Your <h2> should remind visitors about the value of your product. Why do they need it?\n*   The supporting headline should explain how your product delivers what you promise in the headline\n\nUpdated on: Friday, September 22, 2023\n\nLooking for UI-only components like buttons, inputs, etc? It's all available with daisyUI. See\n\n[this guide](https://shipfa.st/docs/components)\n\nfor more info."
}]